{
    "contents" : "# Helper functions for mleda plots\n\n#############################################\n# convert_types\n# Converts variable types in one data frame according to\n# another vector\n# @param obj the data frame that needs to be altered\n# @param types vector of variable types (as strings) to transform to\n\nconvert_types <- function(obj, types){\n  for (i in 1:length(obj)){\n    FUN <- switch(types[i],\n                  character = as.character, \n                  numeric = as.numeric, \n                  integer = as.integer,\n                  factor = as.factor)\n    obj[,i] <- FUN(obj[,i])\n  }\n  obj\n}\n\n#############################################\n# col_calc\n# Converts median values or most popular level for \n# each variable\n# @param x the variable (to be used with sapply)\n\ncol_calc <- function(x){\n  \n  if(class(x) %in% c(\"numeric\", \"integer\")) to_return <- median(x)\n  else if(class(x) %in% c(\"factor\", \"ordered\")) to_return <- levels(x)[which.max(table(x))]\n  else if(class(x) == \"character\") to_return <- \"character\"\n  else to_return <- NA\n  \n  to_return\n  \n}\n\n#############################################\n# construct_grid\n# Constructs a grid of predicted values\n# @param the_data the dataset to be used\n# @param the_mod the model\n# @param var_name the variable name\n# @param reference reference group in the case of classification\n\n# Constructs grid of predicted values\nconstruct_grid <- function(the_data, the_mod, var_name, reference){\n  \n  new_data <- rbind(the_data, sapply(the_data, col_calc)) %>%\n    filter(row_number() == n()) %>%\n    convert_types(unlist(sapply(the_data, class)))\n  \n  the_grid <- list(NA)\n  \n  if(sum(sapply(the_data[, var_name], is.factor)) > 0){\n    \n    for(the_var in 1:length(var_name)){\n      \n      if(is.factor(the_data[, var_name[the_var]])){\n        \n        the_grid[[the_var]] <- unique(the_data[, var_name[the_var]])\n        \n      } else{\n        \n        the_grid[[the_var]] <- seq(from = min(the_data[, var_name[the_var]]),\n                                   to = max(the_data[, var_name[the_var]]),\n                                   length.out = 20)\n        \n      } \n      \n    }\n    \n    grid_total <- do.call(expand.grid, the_grid)\n    names(grid_total) <- var_name\n    \n  } else{\n    \n    the_grid[[1]] <- seq(from = min(the_data[, var_name[1]]),\n                         to = max(the_data[, var_name[1]]),\n                         length.out = 20)\n    \n    if(length(var_name) == 2){\n      \n      the_grid[[2]] <- c(mean(the_data[, var_name[2]]) - sd(the_data[, var_name[2]]),\n                         mean(the_data[, var_name[2]]),\n                         mean(the_data[, var_name[2]]) + sd(the_data[, var_name[2]]))\n      \n      \n    }\n    \n    grid_total <- do.call(expand.grid, the_grid)\n    names(grid_total) <- var_name\n    \n  }\n  \n  new_data <- new_data[rep(1, nrow(grid_total)), ]\n  \n  for(the_var in 1:length(var_name)) {\n    \n    new_data[, var_name[the_var]] <- grid_total[, the_var]\n    \n  }\n  \n  if(the_mod$type == \"classification\"){\n    \n    new_data$pred <- as.vector(predict(the_mod, newdata = new_data, type = \"prob\")[, reference])\n    \n  } else {\n    \n    new_data$pred <- as.vector(predict(the_mod, newdata = new_data))\n    \n  }\n  \n  if(length(var_name) == 2 & sum(sapply(the_data[, var_name], is.factor)) == 0){\n    \n    new_data[, var_name[2]] <- factor(rep(c(\"-1SD\", \"0SD\", \"+1SD\"), each = length(the_grid[[1]])),\n                                      levels = c(\"-1SD\", \"0SD\", \"+1SD\"))\n    \n  }\n  \n  return(new_data)\n  \n}\n\n#############################################\n# L1_cat\n# Creates main effects plot for level-1 \n# categorical variables\n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param reference reference group in the case of classification\n\nL1_cat <- function(the_data, the_mod, var_name, type, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = outcome, group = var_name[1]), data = the_data) +\n      geom_jitter(position = position_jitter(width = 0.2, height = 0), color = \"#545454\", alpha = 0.2) +\n      geom_errorbar(stat = \"hline\", yintercept = \"mean\", width = 0.8, aes(ymax = ..y.., ymin = ..y..), size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[1], \"- Raw\")) +\n      theme_bw() + \n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"pred\", group = var_name[1]), data = new_data) + \n      geom_jitter(aes_string(x = var_name[1], y = outcome), data = the_data,\n                  position = position_jitter(width = .2, height = 0), color = \"#545454\", alpha = 0.2) +\n      geom_errorbar(stat = \"hline\", yintercept = \"mean\", width = 0.8, aes(ymax = ..y.., ymin = ..y..), size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ylab(paste(\"Predicted\", outcome)) +\n      ggtitle(paste(var_name[1], \"- Predicted\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n\n#############################################\n# L1_cont\n# Creates main effects plot for level-1 \n# continous variables\n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param reference reference group in the case of classification\n\nL1_cont <- function(the_data, the_mod, var_name, type, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = outcome), data = the_data) + \n      geom_point(color = \"#545454\", alpha = 0.2) + \n      geom_smooth(method = \"loess\", color = \"black\", se = FALSE, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[1], \"- Raw\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"pred\"), data = new_data) + \n      geom_point(aes_string(x = var_name[1], y = outcome), data = the_data, color = \"#545454\", alpha = 0.2) +\n      geom_smooth(method = \"loess\", color = \"black\", linetype = \"longdash\", se = FALSE, size = 2) +\n      geom_line(size = 1) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ylab(paste(\"Predicted\", outcome)) +\n      ggtitle(paste(var_name[1], \"- Predicted\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n\n#############################################\n# L2_cat\n# Creates main effects plot for level-2 \n# categorical variables\n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param cluster cluster variable for level-2\n# @param reference reference group in the case of classification\n\nL2_cat <- function(the_data, the_mod, var_name, type, cluster, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  if(the_mod$type == \"classification\"){\n    \n    new_agg <- s_select(the_data, cluster, outcome, var_name) %>%\n      s_group_by(cluster) %>%\n      s_summarise(paste0(\"the_mean = sum(\", outcome, \" == '\", reference, \"')/n()\"),\n                  paste0(\"the_se = sqrt((sum(\", outcome, \"== '\", reference, \"')/n() * sum(\",\n                         outcome, \" != '\", reference, \"')/n())/n())\"),\n                  paste0(var_name, \" = levels(\", var_name, \")[which.max(table(\", var_name, \"))]\"))\n    \n  } else{\n    \n    new_agg <- s_select(the_data, cluster, outcome, var_name) %>%\n      s_group_by(cluster) %>%\n      s_summarise(paste0(\"the_mean = mean(\", outcome, \")\"),\n                  paste0(\"the_se = sd(\", outcome, \")/length(\", outcome, \")\"),\n                  paste0(var_name, \" = levels(\", var_name, \")[which.max(table(\", var_name, \"))]\"))\n    \n  }\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"the_mean\", group = var_name[1]), data = new_agg) +\n      geom_pointrange(aes(ymax = the_mean + the_se, ymin = the_mean - the_se), size = 1,\n                      position = position_jitter(width = 0.2, height = 0), shape = 21, fill = \"white\") +\n      geom_errorbar(stat = \"hline\", yintercept = \"mean\", width = 0.8, aes(ymax = ..y.., ymin = ..y..), size = 2) +\n      labs(y = outcome) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[1], \"- Raw\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"the_mean\", group = var_name[1]), data = new_agg) +\n      geom_pointrange(aes(ymax = the_mean + 2 * the_se, ymin = the_mean - 2 * the_se), size = 1,\n                      position = position_jitter(width = .2, height = 0), shape = 21, fill = \"white\") +\n      geom_errorbar(aes_string(x = var_name[1], y = \"pred\", group = var_name[1], ymax = \"..y..\", ymin = \"..y..\"), data = new_data,\n                    stat = \"hline\", yintercept = \"mean\", width = 0.8, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      labs(y = paste(\"Predicted\", outcome)) +\n      ggtitle(paste(var_name[1], \"- Predicted\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n\n#############################################\n# L2_cont\n# Creates main effects plot for level-2 \n# continuous variables\n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param cluster cluster variable for level-2\n# @param reference reference group in the case of classification\n\nL2_cont <- function(the_data, the_mod, var_name, type, cluster, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  if(the_mod$type == \"classification\"){\n    \n    new_agg <- s_select(the_data, cluster, outcome, var_name) %>%\n      s_group_by(cluster) %>%\n      s_summarise(paste0(\"the_mean = sum(\", outcome, \" == '\", reference, \"')/n()\"),\n                  paste0(\"the_se = sqrt((sum(\", outcome, \"== '\", reference, \"')/n() * sum(\",\n                         outcome, \" != '\", reference, \"')/n())/n())\"),\n                  paste0(var_name, \" = mean(\", var_name, \")\"))\n    \n  } else{\n    \n    new_agg <- s_select(the_data, cluster, outcome, var_name) %>%\n      s_group_by(cluster) %>%\n      s_summarise(paste0(\"the_mean = mean(\", outcome, \")\"),\n                  paste0(\"the_se = sd(\", outcome, \")/length(\", outcome, \")\"),\n                  paste0(var_name[1], \" = mean(\", var_name, \")\"))\n    \n  }\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"the_mean\"), data = new_agg) +\n      geom_errorbar(aes(ymax = the_mean + 2 * the_se, ymin = the_mean - 2 * the_se), width = 0, size = 1) +\n      geom_smooth(method = \"loess\", color = \"black\", size = 2, se = FALSE) +\n      geom_point(size = 3, shape = 21, fill = \"white\") +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      labs(y = outcome) +\n      ggtitle(paste(var_name[1], \"- Raw\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"the_mean\"), data = new_agg) +\n      geom_errorbar(aes(ymax = the_mean + 2 * the_se, ymin = the_mean - 2 * the_se), width = 0, size = 1) +\n      geom_point(size = 3, shape = 21, fill = \"white\") +\n      geom_line(aes_string(x = var_name[1], y = \"pred\"), data = new_data, size = 1) +\n      geom_smooth(aes_string(x = var_name[1], y = \"pred\"), data = new_data, size = 2,\n                  method = \"loess\", color = \"black\", se = FALSE, linetype = \"longdash\") +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      labs(y = paste(\"Predicted\", outcome)) +\n      ggtitle(paste(var_name[1], \"- Predicted\")) +\n      theme_bw() +\n      theme(plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n\n#############################################\n# cat_cat\n# Creates an interaction plot for two categorical\n# variables \n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param reference reference group in the case of classification\n\ncat_cat <- function(the_data, the_mod, var_name, type, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    new_data <- s_group_by(the_data, var_name) %>%\n      s_summarise(paste(\"my_mean = mean(\", outcome, \")\"))\n    \n    p <- ggplot(aes_string(x = var_name[1], y = outcome, linetype = var_name[2]), data = the_data) +\n      geom_point(aes_string(x = var_name[1], y = \"my_mean\", shape = var_name[2]), data = new_data, size = 5) +\n      geom_line(aes_string(x = var_name[1], y = \"my_mean\", group = var_name[2]), data = new_data, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[1], \"x\", var_name[2], \"Interaction - Raw\")) + \n      theme_bw() +\n      theme(legend.justification = c(1, 0),\n            legend.position = c(1, 0),\n            legend.background = element_rect(color = \"black\", size = 1, linetype = \"solid\"),\n            plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = outcome, linetype = var_name[2]), data = the_data) +\n      geom_point(aes_string(x = var_name[1], y = \"pred\", shape = var_name[2]), data = new_data, size = 5) +\n      geom_line(aes_string(x = var_name[1], y = \"pred\", group = var_name[2]), data = new_data, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[1], \"x\", var_name[2], \"Interaction - Predicted\")) + \n      theme_bw() +\n      theme(legend.justification = c(1, 0),\n            legend.position = c(1, 0),\n            legend.background = element_rect(color = \"black\", size = 1, linetype = \"solid\"),\n            plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n\n#############################################\n# cat_cont\n# Creates an interaction plot for two categorical\n# variables \n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param reference reference group in the case of classification\n\ncat_cont <- function(the_data, the_mod, var_name, type, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  is_cat <- which.max(sapply(the_data[, var_name], is.factor))\n  is_cont <- which.min(sapply(the_data[, var_name], is.factor))\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[is_cont], y = outcome, group = var_name[is_cat]), data = the_data) +\n      geom_smooth(aes_string(linetype = var_name[is_cat]), method = \"loess\", color = \"black\", se = FALSE, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[is_cont], \"x\", var_name[is_cat], \"Interaction - Raw\")) +\n      theme_bw() +\n      theme(legend.justification = c(1, 0),\n            legend.position = c(1, 0),\n            legend.background = element_rect(color = \"black\", size = 1, linetype = \"solid\"),\n            plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[is_cont], y = \"pred\", group = var_name[is_cat]), data = new_data) +\n      geom_smooth(aes_string(linetype = var_name[is_cat]), method = \"loess\", color = \"black\", se = FALSE, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ylab(paste(\"Predicted\", outcome)) +\n      ggtitle(paste(var_name[is_cont], \"x\", var_name[is_cat], \"Interaction - Predicted\")) +\n      theme_bw() +\n      theme(legend.justification = c(1, 0),\n            legend.position = c(1, 0),\n            legend.background = element_rect(color = \"black\", size = 1, linetype = \"solid\"),\n            plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n\n#############################################\n# cont_cont\n# Creates an interaction plot for two categorical\n# variables \n# @param the_data the dataset to be used\n# @param the_mod the model (only randomForest right now)\n# @param var_name the variable name\n# @param type either regression or classification\n# @param reference reference group in the case of classification\n\ncont_cont <- function(the_data, the_mod, var_name, type, reference){\n  \n  outcome <- paste(the_mod$terms[[2]])\n  \n  if(type == \"raw\"){\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    the_data[, var_name[2]] <- cut(the_data[, var_name[2]],\n                                   c(min(the_data[, var_name[2]]) - 1,\n                                     median(the_data[, var_name[2]]),\n                                     max(the_data[, var_name[2]]) + 1),\n                                   labels = c(\"Low\", \"High\"))\n    \n    p <- ggplot(aes_string(x = var_name[1], y = outcome, group = var_name[2]), data = the_data) +\n      geom_smooth(aes_string(linetype = var_name[2]), method = \"loess\", color = \"black\", se = FALSE, size = 2) +\n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ggtitle(paste(var_name[1], \"x\", var_name[2], \"Interaction - Raw\")) +\n      theme_bw() +\n      theme(legend.justification = c(1, 0),\n            legend.position = c(1, 0),\n            legend.background = element_rect(color = \"black\", size = 1, linetype = \"solid\"),\n            plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- outcome\n    \n  } else if(type == \"predicted\"){\n    \n    new_data <- construct_grid(the_data, the_mod, var_name, reference)\n    \n    if(the_mod$type == \"classification\"){\n      \n      the_data[, paste(the_mod$terms[[2]])] <- ifelse(the_data[, paste(the_mod$terms[[2]])] == reference, 1, 0)\n      \n    }\n    \n    p <- ggplot(aes_string(x = var_name[1], y = \"pred\", linetype = var_name[2]), data = new_data) +\n      geom_smooth(method = \"loess\", color = \"black\", se = FALSE, size = 2) +\n      scale_linetype_manual(values = c(\"dotted\", \"dashed\", \"solid\")) + \n      ylim(min(the_data[, outcome]), max(the_data[, outcome])) +\n      ylab(paste(\"Predicted\", outcome)) +\n      ggtitle(paste(var_name[1], \"x\", var_name[2], \"Interaction - Predicted\")) + \n      theme_bw() +\n      theme(legend.justification = c(1, 0),\n            legend.position = c(1, 0),\n            legend.background = element_rect(color = \"black\", size = 1, linetype = \"solid\"),\n            legend.key.width = unit(1.5, \"cm\"),\n            plot.title = element_text(face = \"bold\"))\n    \n    y_axis <- paste(\"Predicted\", outcome)\n    \n  } else stop(\"Please enter either raw or predicted for type.\")\n  \n  if(the_mod$type == \"classification\"){\n    \n    p + ylab(paste0(y_axis, \" (1 = \", reference, \")\"))\n    \n  } else{\n    \n    p\n    \n  }\n  \n}\n",
    "created" : 1432132258126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "9|38|19|0|\n27|24|36|0|\n47|67|123|0|\n135|65|191|0|\n203|66|259|0|\n272|74|350|0|\n363|75|442|0|\n454|66|517|0|\n529|67|591|0|\n603|68|670|0|\n",
    "hash" : "2769105346",
    "id" : "5E70D748",
    "lastKnownWriteTime" : 1432134331,
    "path" : "~/Documents/college stuffs/grad school/Research/Dissertation/Dissemination/mleda/R/mleda_helper.R",
    "project_path" : "R/mleda_helper.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}