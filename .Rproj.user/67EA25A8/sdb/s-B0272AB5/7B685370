{
    "contents" : "#' plots stuff\n#' @param the_data - the dataset to be used\n#' @param the_mod - the model (limited to randomForest objects right now)\n#' @param var_name - vector of strings of variable names to plot\n#' @param var_level - vector of numbers indicating levels (1 or 2 only)\n#' @param cluster - string of variable name that represents cluster\n#' @param type - plot raw or predicted values\n#' @param interact - boolean indicating if an interaction should be plotted (limited to two variables)\n#' @param reference - reference category in the case of classification. Default is most endorsed category\n#' @return plot of main effects/interactions\n#' @examples\n#' # to do\n#' @references [1] How to add numbers\n#' @import dplyr ggplot2 grid gridExtra\n#' @export\n\nplot_ml <- function(the_data, the_mod, var_name, var_level, cluster, type = \"raw\", interact = FALSE, reference){\n  \n  if(length(var_name) != length(var_level)) stop(\"Please make sure var_name and var_level are of matching lengths.\")\n  \n  if(interact == TRUE & length(var_name) > 2) stop(\"Interactions are limited to two variables.\")\n  \n  if(interact == TRUE & length(var_name) == 1) stop(\"Interactions require more than one variable.\")\n  \n  if(sum(!(var_level %in% c(1, 2))) > 0) stop(\"Please use only 1 or 2 as numeric values to indicate levels.\")\n  \n  if(the_mod$type == \"classification\" & missing(reference)) reference <- levels(the_data[, paste(the_mod$terms[[2]])])[1]\n  \n  if(!missing(reference)){\n    \n    if(the_mod$type != \"classification\") stop(\"Only use a reference group for a classification forest\")\n    \n    if(!(reference %in% levels(the_data[, paste(the_mod$terms[[2]])]))) stop(paste(reference, \"not a correct level.\"))\n    \n  }   \n  \n  if(sum(!(var_name %in% names(the_data))) > 0){\n    \n    stop(paste0(\"Variables (\", paste(var_name[!(var_name %in% names(the_data))], collapse = \", \"), \") not in the dataset.\"))\n    \n  }\n  \n  plot_list <- list(NA)\n  \n  for(the_plot in 1:length(var_name)){\n    \n    if(is.factor(the_data[, var_name[the_plot]]) & var_level[the_plot] == 1){\n      \n      p <- L1_cat(the_data, the_mod, var_name[the_plot], type, reference)\n      \n    } else if(is.factor(the_data[, var_name[the_plot]]) & var_level[the_plot] == 2){\n      \n      p <- L2_cat(the_data, the_mod, var_name[the_plot], type, cluster, reference)\n      \n    } else if(!is.factor(the_data[, var_name[the_plot]]) & var_level[the_plot] == 1){\n      \n      p <- L1_cont(the_data, the_mod, var_name[the_plot], type, reference)\n      \n    } else{\n      \n      p <- L2_cont(the_data, the_mod, var_name[the_plot], type, cluster, reference)\n      \n    }\n    \n    plot_list[[the_plot]] <- p\n    \n  }\n  \n  if(type == \"predicted\"){\n    \n    new_data <- rbind.data.frame(the_data, sapply(the_data, col_calc)) %>%\n      filter(row_number() == n()) %>%\n      convert_types(unlist(sapply(the_data, class))) \n    \n    the_message <- cbind(data.frame(GRID = \"\"), s_select(new_data, paste0(\"-\", cluster)))\n    names(the_message)[1] <- \"GRID:     \"\n    \n    print(the_message)\n    \n  }\n  \n  if(interact == TRUE){\n    \n    if(sum(var_level == 1) %in% c(0, 1, 2) & sum(sapply(the_data[, var_name], is.factor)) == 2){\n      \n      plot_list[[length(plot_list) + 1]] <- cat_cat(the_data, the_mod, var_name, type, reference)\n      \n    } else if(sum(var_level == 1) %in% c(0, 1, 2) & sum(sapply(the_data[, var_name], is.factor)) == 1){\n      \n      plot_list[[length(plot_list) + 1]] <- cat_cont(the_data, the_mod, var_name, type, reference)\n      \n    } else if(sum(var_level == 1) %in% c(0, 1, 2) & sum(sapply(the_data[, var_name], is.factor)) == 0){\n      \n      plot_list[[length(plot_list) + 1]] <- cont_cont(the_data, the_mod, var_name, type, reference)\n      \n    } else{\n      \n      stop(\"Error in input.\")\n      \n    }\n    \n  }\n  \n  do.call(grid.arrange, c(plot_list, nrow = floor(sqrt(length(plot_list)))))\n  \n}",
    "created" : 1432129768590.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1496483466",
    "id" : "7B685370",
    "lastKnownWriteTime" : 1432136487,
    "path" : "~/Documents/college stuffs/grad school/Research/Dissertation/Dissemination/mleda/R/mleda.R",
    "project_path" : "R/mleda.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}